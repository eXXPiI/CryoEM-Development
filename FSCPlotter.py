## Preamble
"""
# Program: FSCPlotter.py
# Version: 0.0.1
# Author: Jonathan Myers
# Date Created: Tue Feb 22 19:22:03 2022
# Date Modified: June 24 2022
# Purpose: Plot FSC curve from data generated by emClarity.
# Imports: sys, re (regular expression), os (operating system), math, numpy, 
and matplotlib.
# Inputs/Arguments: Non-optional global FSC text file directory path, flag for 
input type, and saved image format flag (png or pdf most likely). If input 
type flag "emClarity" used, path must lead to folder containing data file and
other files are ignored. If input type flag "cisTEM" used, path must lead to 
folder with single data file (additional files are not allowed).
# Outputs/Returns: Generates FSC curve plot and saves them to file.
"""

## Articles

def FSCPlotter(inputPath,inputFlag,imageFormat):
    import re
    import os
    import math
    import numpy as np
    import matplotlib.pyplot as plt
    
    # Set Up Data Directory
    dataDirectory = os.chdir(inputPath)
    allFiles = os.listdir(dataDirectory)
    baseParent = os.path.basename(os.path.normpath(os.path.abspath(inputPath)))
    
    # Extract Data From Relevant Files
    if inputFlag == "emClarity":
        # Regular Expression And Parsing Format:
        # emClarity Format: cycle<iter>_<subTomoMeta>_<suffix>-fsc_GLD.txt
        emClarityRegEx = ['cycle','([0-9]+)[_]','([a-zA-Z0-9-]*)[_]',
                          '([a-zA-Z0-9-_]*)','-fsc_GLD\.txt']
        emClarityPatternFinder = re.compile(''.join(emClarityRegEx))
        
        # Acquire Files From Directory and Parse Filename Metadata
        dataInfo = []
        dataFiles = []
        for info in allFiles:
            try:
                dataInfo.append(emClarityPatternFinder.findall(info)[0])
                dataFiles.append(info)
            except IndexError:
                # No Computation Time Dedicated To Non-Scheme Files
                pass
        
        # Read Input Text File For FSC Information
        inputData = np.loadtxt(dataFiles[0])
        spatialFrequency = inputData[:,0]
        FSC = inputData[:,1]
        
        # Output Figure Save Name
        imageFileName = f"{baseParent}_cycle{dataInfo[0][0]}_{dataInfo[0][1]}_" \
                        f"{dataInfo[0][2]}_FSC-Overall.{imageFormat}"
    
    elif inputFlag == "cisTEM":
        # Read Input Text File for FSC Information
        dataInfo = os.path.splitext(allFiles[0])[0]
        inputData = np.loadtxt(allFiles[0],skiprows=5)
        resolution = inputData[:,1]
        spatialFrequency = 1/resolution
        FSC = inputData[:,3]
        
        # Output Figure Save Name
        imageFileName = f"{baseParent}_{dataInfo}_FSC-Overall.{imageFormat}"
        
    else:
        sys.exit("Missing Data Source. Supported Sources are emClarity and cisTEM.")
            
    # Compute Additional Curves
    frequencyLen = len(spatialFrequency)
    halfFSC = 0.5*np.ones([frequencyLen,1])
    fractionFSC = 0.143*np.ones([frequencyLen,1])
    
    # Compute Limits
    decimalPlace = 10
    increment = 1/decimalPlace
    xMin = spatialFrequency.min()
    xMax = spatialFrequency.max()
    yMin = math.floor(decimalPlace*FSC.min())/decimalPlace
    yMax = math.ceil(decimalPlace*FSC.max())/decimalPlace
    
    # Generate FSC Plots
    dataCurve, = plt.plot(spatialFrequency,FSC,'k')
    halfCurve, = plt.plot(spatialFrequency,halfFSC,'-.')
    fractionCurve, = plt.plot(spatialFrequency,fractionFSC,'--')
    plt.xlim([xMin,xMax])
    plt.ylim([yMin,yMax])
    
    handles = [dataCurve,halfCurve,fractionCurve]
    labels = ["Data","0.5 Correlation","0.143 Correlation"]
    
    # Annotate Plot
    #plt.title(f"{dataInfo[0][1]} {baseParent} FSC Curve")
    plt.title("FSC Curve")
    plt.legend(handles,labels,loc="upper right")
    plt.xlabel("Spatial Frequency (1/$\AA$)")
    plt.ylabel("Fourier Shell Correlation")
    #plt.xticks([])
    plt.yticks(np.arange(yMin,yMax,increment))
    
    # Save Figure Parameters
    figureResolution = 750
    figureTransparency = False
    
    # Save Figure Image
    plt.savefig(imageFileName,dpi=figureResolution,format=imageFormat,
                transparent=figureTransparency)
    

# If Code Independent, Run; If Code Imported, Do Not Run
if __name__ == '__main__':
    import sys
    
    # Testing/Debugging Lines
    """
    inputPath = "/home/jmyers/Documents/testFolder/FSC_Test/emClarity/"
    inputFlag = "emClarity"
    imageFormat = "pdf"
    """
    
    # Define Input Variables
    inputPath = str(sys.argv[1])
    inputFlag = str(sys.argv[2])
    imageFormat = str(sys.argv[3])
    
    # Main Script Run
    FSCPlotter(inputPath,inputFlag,imageFormat)

# M02 End Program